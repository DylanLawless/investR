# 	Date = forecast_dates,
# 	Price = future_forecast$mean,
# 	Lower_80 = future_forecast$lower[, "80%"],
# 	Upper_80 = future_forecast$upper[, "80%"],
# 	Lower_95 = future_forecast$lower[, "95%"],
# 	Upper_95 = future_forecast$upper[, "95%"],
# 	Type = "Forecast"
# )
#
#
# # Assuming you already have the forecasted data in forecast_df and actual data in actual_data
# # Adjust actual_data to include the forecasted intervals placeholders
# actual_data <- actual_data %>%
# 	mutate(Lower_80 = NA,  # Placeholder for lower 80% confidence interval
# 			 Upper_80 = NA,  # Placeholder for upper 80% confidence interval
# 			 Lower_95 = NA,  # Placeholder for lower 95% confidence interval
# 			 Upper_95 = NA)  # Placeholder for upper 95% confidence interval
#
# # Rename the actual price column in actual_data to match forecast_df
# names(actual_data)[names(actual_data) == "AAPL.Close"] <- "Price"
#
#
# # Combine actual and forecast data
# combined_data <- rbind(actual_data, forecast_df)
#
# head(combined_data)
# head(actual_data)
# head(forecast_df)
#
# # Plotting using ggplot2
# p_forecast <- ggplot(combined_data, aes(x = Date, y = Price, color = Type)) +
# 	geom_line() +
# 	geom_ribbon(data = forecast_df, aes(ymin = Lower_95, ymax = Upper_95), fill = "red", alpha = 0.2) +
# 	geom_ribbon(data = forecast_df, aes(ymin = Lower_80, ymax = Upper_80), fill = "blue", alpha = 0.3) +
# 	labs(title = "Forecast of AAPL Closing Prices", x = "Date", y = "Price") +
# 	scale_color_manual(values = c("Actual" = "black", "Forecast" = "green")) +
# 	theme_minimal()
#
# # Print the plot
# print(p_forecast)
#
#
# library(ggplot2)
#
# # Plotting the forecast
# autoplot(future_forecast) +
# 	# autolayer(aapl_close, series = "AAPL Close", colour = "blue") +  # Add actual data
# 	ggtitle("AAPL Stock Price Forecast") +
# 	xlab("Date") +
# 	ylab("Price") +
# 	theme_minimal() +
# 	scale_color_manual(values = c("Forecast" = "red", "AAPL Close" = "blue"))
# New approach -----
# Identify 'Blue' and 'Red' Points: Determine points in time where a peak ('Blue') is followed by a significant drop ('Red').
# Calculate Fit for Each Segment: Use linear regression to fit lines to the closing prices between each 'Blue' and subsequent 'Red' point.
# Normalize and Compare Slopes: Normalize the slopes by adjusting for the duration of the trend to make them comparable.
# Predict Future Sell Points: Use historical data to establish a model for predicting future sell points based on current trends.
## get segments ----
library(quantmod)
library(ggplot2)
library(dplyr)
library(broom)  # for easy model summaries
# Load data
# getSymbols("AAPL", src = "yahoo", from = "2018-01-01", to = "2018-12-31")
# aapl_df <- data.frame(Date = index(AAPL), AAPL.Close = Cl(AAPL))
# Sliding window analysis parameters
window_size <- 30  # days
step_size <- 1     # step forward by 1 day
# Initialize a list to store results
models <- list()
# Perform sliding window regression
for (start_index in 1:(nrow(aapl_df) - window_size + 1)) {
end_index <- start_index + window_size - 1
data_subset <- aapl_df[start_index:end_index, ]
# Fit linear model
fit <- lm(AAPL.Close ~ Date, data = data_subset)
# Summarize the model
summary_fit <- glance(fit)
# Store results
models[[start_index]] <- list(
model = fit,
start_date = data_subset$Date[1],
end_date = max(data_subset$Date),
r_squared = summary_fit$r.squared
)
}
# Convert list to dataframe for easy manipulation and plotting
model_df <- do.call(rbind, lapply(models, function(x) {
data.frame(
StartDate = x$start_date,
EndDate = x$end_date,
RSquared = x$r_squared,
CoefIntercept = coef(x$model)[1],
CoefSlope = coef(x$model)[2]
)
}))
# Rank models based on R-squared
model_df <- model_df %>%
mutate(Rank = rank(-RSquared))  # rank in descending order of R-squared
head(model_df)
aapl_df$Date <- as.Date(aapl_df$Date)
# Adjust model_df to include start and end y-values for segments
model_df <- model_df %>%
mutate(
Start_Y = CoefIntercept + CoefSlope * as.numeric(StartDate),
End_Y = CoefIntercept + CoefSlope * as.numeric(EndDate)
)
# Now plot using the modified model_df with pre-calculated y-values
ggplot(aapl_df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
geom_segment(data = model_df, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, colour = Rank), alpha = 0.5) +
scale_colour_gradient(low = "blue", high = "red") +
labs(title = "AAPL Closing Prices with Sliding Window Linear Fits",
subtitle = "Window size: 30 days, coloured by fit quality (R-squared rank)") +
theme_minimal()
## find best segments ----
# Assume model_df is already created and contains StartDate, EndDate, and Rank
model_df <- model_df %>%
arrange(Rank) # Ascending order so best ranks come first
# Initialize variables to track coverage
covered_until <- min(aapl_df$Date) - 1 # Start before the first date
selected_segments <- data.frame()
# Iterate through sorted segments to cover the whole range
while(covered_until < max(aapl_df$Date)) {
# Find segments that start before or when the last coverage ends
available_segments <- model_df[model_df$StartDate <= (covered_until + 1),]
# Check if there are any segments available to pick
if (nrow(available_segments) == 0) break
# Select the segment that ends the latest among the available choices
best_segment <- available_segments[which.max(available_segments$EndDate),]
# Add the best segment to the selected segments
selected_segments <- rbind(selected_segments, best_segment)
# Update the coverage end date
covered_until <- best_segment$EndDate
}
# Check the selected segments
print(selected_segments)
# Plotting selected segments over the AAPL closing prices
ggplot(aapl_df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
geom_segment(data = selected_segments, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, colour = Rank), alpha = 0.75) +
scale_colour_gradient(low = "red", high = "yellow") +
labs(title = "Optimal Coverage with Top Ranked Line Segments", y = "Closing Price") +
theme_minimal()
## apply segments ----
red_test_results |> select(Sell_Date, Closing_Price)
blue_test_results |> select(Predicted_Sell_Date, Predicted_Closing_Price)
red_test_results$prediction <- "red"
red_test_results$Date <- red_test_results$Sell_Date
blue_test_results$prediction <- "blue"
blue_test_results$Date <- blue_test_results$Predicted_Sell_Date
blue_test_results$Closing_Price <- blue_test_results$Predicted_Closing_Price
tmp1 <- red_test_results |> select(Date, Closing_Price, prediction)
tmp2 <- blue_test_results |> select(Date, Closing_Price, prediction)
tmp3 <- rbind(tmp1, tmp2)
ggplot(aapl_df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
geom_segment(data = selected_segments, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = Rank), alpha = 0.75) +
# scale_colour_gradient(low = "red", high = "yellow") +
geom_point(data=tmp3, aes(y = Closing_Price, color = as.factor(prediction))) +
labs(title = "Optimal Coverage with Top Ranked Line Segments", y = "Closing Price") +
theme_minimal()
ggplot(aapl_df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
geom_segment(data = selected_segments, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = Rank), alpha = 0.75) +
# scale_colour_gradient(low = "red", high = "yellow") +
geom_point(data=tmp3, aes(y = Closing_Price, color = as.factor(prediction))) +
labs(title = "Optimal Coverage with Top Ranked Line Segments", y = "Closing Price") +
theme_minimal()
ggplot(aapl_df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
geom_segment(data = selected_segments, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y#, color = Rank
), alpha = 0.75) +
geom_point(data = tmp3, aes(y = Closing_Price, color = prediction)) +
scale_color_manual(values = c("red" = "red", "blue" = "blue")) +
labs(title = "Optimal Coverage with Top Ranked Line Segments", y = "Closing Price") +
theme_minimal()
# Visualizing the trading outcomes on test data
as.Date(red_test_results$Sell_Date)
blue_test_results$Predicted_Sell_Date
# Step 1: Identify Rising Run Windows
# Assuming 'tmp3' contains the merged red and blue points
tmp3 <- tmp3 %>%
arrange(Date) %>%
mutate(Change = lead(prediction, default = last(prediction)) != prediction,
RunIndex = cumsum(Change & prediction == "red")) %>%
filter(prediction == "blue" | (prediction == "red" & Change))
# Step 2: Analyze Fitted Lines Within Each Window
# Assuming 'selected_segments' contains StartDate, EndDate, Start_Y, End_Y, and Rank
selected_segments <- selected_segments %>%
mutate(WindowIndex = map_dbl(StartDate, ~min(tmp3$RunIndex[tmp3$Date >= .])))
tmp3
selected_segments
library(purr)
library(purrr)
# Step 1: Identify Rising Run Windows
# Assuming 'tmp3' contains the merged red and blue points
tmp3 <- tmp3 %>%
arrange(Date) %>%
mutate(Change = lead(prediction, default = last(prediction)) != prediction,
RunIndex = cumsum(Change & prediction == "red")) %>%
filter(prediction == "blue" | (prediction == "red" & Change))
# Step 2: Analyze Fitted Lines Within Each Window
# Assuming 'selected_segments' contains StartDate, EndDate, Start_Y, End_Y, and Rank
selected_segments <- selected_segments %>%
mutate(WindowIndex = map_dbl(StartDate, ~min(tmp3$RunIndex[tmp3$Date >= .])))
# Calculate summary statistics for each window
slope_stats <- selected_segments %>%
group_by(WindowIndex) %>%
summarize(Avg_Slope = mean((End_Y - Start_Y) / (EndDate - StartDate)),
Slope_SD = sd((End_Y - Start_Y) / (EndDate - StartDate)),
Count = n())
# Assuming 'selected_segments' contains StartDate, EndDate, Start_Y, End_Y, and Rank
selected_segments <- selected_segments %>%
mutate(WindowIndex = sapply(StartDate, function(date) min(tmp3$RunIndex[tmp3$Date >= date])))
# Calculate summary statistics for each window
slope_stats <- selected_segments %>%
group_by(WindowIndex) %>%
summarize(Avg_Slope = mean((End_Y - Start_Y) / as.numeric(EndDate - StartDate)),
Slope_SD = sd((End_Y - Start_Y) / as.numeric(EndDate - StartDate)),
Count = n())
# Step 3: Visualize by Rising Run Window Index
ggplot(selected_segments, aes(x = as.numeric(StartDate), xend = as.numeric(EndDate), y = Start_Y, yend = End_Y)) +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75) +
scale_color_brewer(palette = "Set1", name = "Window Index") +
geom_point(data = tmp3, aes(x = as.numeric(Date), y = Closing_Price, color = prediction), size = 3) +
labs(title = "Analysis of Rising Run Windows", x = "Date (numeric)", y = "Stock Price") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(selected_segments, aes(x = as.numeric(StartDate), xend = as.numeric(EndDate), y = Start_Y, yend = End_Y)) +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75)
ggplot(selected_segments, aes(x = as.numeric(StartDate), xend = as.numeric(EndDate), y = Start_Y, yend = End_Y)) +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75) +
scale_color_brewer(palette = "Set1", name = "Window Index") +
geom_point(data = tmp3, aes(x = as.numeric(Date), y = Closing_Price, color = prediction), size = 3)
ggplot(aapl_df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
geom_segment(data = selected_segments,
aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y#, color = Rank
), alpha = 0.75) +
geom_point(data = tmp3, aes(y = Closing_Price, color = prediction)) +
scale_color_manual(values = c("red" = "red", "blue" = "blue")) +
labs(title = "Optimal Coverage with Top Ranked Line Segments", y = "Closing Price") +
theme_minimal()
ggplot(aapl_df, aes(x = Date, y = AAPL.Close)) +
geom_line() +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75) +
geom_segment(data = selected_segments,
aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y#, color = Rank
), alpha = 0.75) +
geom_point(data = tmp3, aes(y = Closing_Price, color = prediction)) +
scale_color_manual(values = c("red" = "red", "blue" = "blue")) +
labs(title = "Optimal Coverage with Top Ranked Line Segments", y = "Closing Price") +
theme_minimal()
# Step 3: Visualize by Rising Run Window Index
ggplot(selected_segments, aes(x = as.numeric(StartDate), xend = as.numeric(EndDate), y = Start_Y, yend = End_Y)) +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75) +
scale_color_brewer(palette = "Set1", name = "Window Index") +
geom_point(data = tmp3, aes(x = as.numeric(Date), y = Closing_Price, color = prediction), size = 3) +
labs(title = "Analysis of Rising Run Windows", x = "Date (numeric)", y = "Stock Price") +
theme_minimal() +
theme(legend.position = "bottom")
# Step 3: Visualize by Rising Run Window Index
ggplot(selected_segments, aes(x = as.numeric(StartDate), xend = as.numeric(EndDate), y = Start_Y, yend = End_Y)) +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75) +
scale_color_brewer(palette = "Set1", name = "Window Index") +
geom_point(data = tmp3, aes(x = as.numeric(Date), y = Closing_Price, color = prediction), size = 3) +
labs(title = "Analysis of Rising Run Windows", x = "Date (numeric)", y = "Stock Price") +
theme_minimal() +
theme(legend.position = "bottom")
# Step 3: Visualize by Rising Run Window Index
ggplot(selected_segments, aes(x = as.numeric(StartDate), xend = as.numeric(EndDate), y = Start_Y, yend = End_Y)) +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75) +
# scale_color_brewer(palette = "Set1", name = "Window Index") +
geom_point(data = tmp3, aes(x = as.numeric(Date), y = Closing_Price, color = prediction), size = 3) +
labs(title = "Analysis of Rising Run Windows", x = "Date (numeric)", y = "Stock Price") +
theme_minimal() +
theme(legend.position = "bottom")
# Step 3: Visualize by Rising Run Window Index
ggplot(selected_segments, aes(x = as.numeric(StartDate), xend = as.numeric(EndDate), y = Start_Y, yend = End_Y)) +
geom_segment(aes(color = factor(WindowIndex)), alpha = 0.75) +
# scale_color_brewer(palette = "Set1", name = "Window Index") +
# geom_point(data = tmp3, aes(x = as.numeric(Date), y = Closing_Price, color = prediction), size = 3) +
labs(title = "Analysis of Rising Run Windows", x = "Date (numeric)", y = "Stock Price") +
theme_minimal() +
theme(legend.position = "bottom")
# Step 1: Identify Rising Run Windows
# Assuming 'tmp3' contains the merged red and blue points
tmp3 <- tmp3 %>%
arrange(Date) %>%
mutate(Change = lead(prediction, default = last(prediction)) != prediction,
RunIndex = cumsum(Change & prediction == "red")) %>%
filter(prediction == "blue" | (prediction == "red" & Change))
tmp3
head(tmp3)
selected_segments
head(selected_segments)
library(ggplot2)
# Ensure date formats are consistent
aapl_df$Date <- as.Date(aapl_df$Date)
selected_segments$StartDate <- as.Date(selected_segments$StartDate)
selected_segments$EndDate <- as.Date(selected_segments$EndDate)
tmp3$Date <- as.Date(tmp3$Date)
# Merge tmp3 points into selected_segments based on date ranges
merged_data <- selected_segments %>%
rowwise() %>%
mutate(Point_Close = tmp3$Closing_Price[tmp3$Date >= StartDate & tmp3$Date <= EndDate],
Point_Prediction = tmp3$prediction[tmp3$Date >= StartDate & tmp3$Date <= EndDate])
# Adjust merging strategy to use list-columns for handling multiple matches
merged_data <- selected_segments %>%
rowwise() %>%
mutate(
Point_Close = list(tmp3$Closing_Price[tmp3$Date >= StartDate & tmp3$Date <= EndDate]),
Point_Prediction = list(tmp3$prediction[tmp3$Date >= StartDate & tmp3$Date <= EndDate]),
Point_Date = list(tmp3$Date[tmp3$Date >= StartDate & tmp3$Date <= EndDate])
) %>%
ungroup()
# To work with list-columns in ggplot, we need to unnest them appropriately before plotting
merged_data <- tidyr::unnest(merged_data, cols = c(Point_Close, Point_Prediction, Point_Date))
ggplot() +
geom_line(data = aapl_df, aes(x = Date, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction), size = 3) +
scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL Closing Prices with Predictive Points and Segments",
x = "Date", y = "Closing Price") +
theme_minimal()
merged_data
View(merged_data)
ggplot() +
geom_line(data = aapl_df, aes(x = 1, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction), size = 3) +
scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL Closing Prices with Predictive Points and Segments",
x = "Date", y = "Closing Price") +
theme_minimal()
ggplot() +
geom_line(data = aapl_df, aes(x = Date, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction), size = 3) +
scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL Closing Prices with Predictive Points and Segments",
x = "Date", y = "Closing Price") +
theme_minimal()
ggplot() +
geom_line(data = aapl_df, aes(x = Date, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction), size = 1) +
scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL Closing Prices with Predictive Points and Segments",
x = "Date", y = "Closing Price") +
theme_minimal()
ggplot() +
geom_line(data = aapl_df, aes(x = Date, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction)) +
scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL Closing Prices with Predictive Points and Segments",
x = "Date", y = "Closing Price") +
theme_minimal()
selected_segments <- selected_segments %>%
mutate(
Relative_Days = map2(StartDate, EndDate, ~seq.Date(.x, .y, by = "day") - .x)
) %>%
unnest(cols = c(Relative_Days)) %>%
group_by(WindowIndex) %>%
mutate(
Day_Index = row_number() - 1  # Day 0 to Day 6
) %>%
ungroup()
plotting_data <- selected_segments %>%
select(WindowIndex, Day_Index, Start_Y, End_Y) %>%
arrange(WindowIndex, Day_Index)
# Calculate the Y values for each Day_Index based on the slope and intercept
plotting_data <- plotting_data %>%
group_by(WindowIndex) %>%
mutate(
Y_Value = Start_Y + (End_Y - Start_Y) * (Day_Index / max(Day_Index))
) %>%
ungroup()
ggplot(plotting_data, aes(x = Day_Index, y = Y_Value, group = WindowIndex, color = as.factor(WindowIndex))) +
geom_line(alpha = 0.75) +
scale_color_viridis_d(option = "magma", begin = 0.3, end = 0.9, direction = 1) +
labs(
title = "Normalized View of Stock Price Movements Over 7-Day Segments",
x = "Day Index (0-6)",
y = "Stock Price",
color = "Segment Index"
) +
theme_minimal() +
theme(legend.position = "none")  # Hide the legend if too many segments
ggplot(plotting_data, aes(x = Day_Index, y = Y_Value, group = WindowIndex, color = as.factor(WindowIndex))) +
geom_line(alpha = 0.75) +
scale_color_viridis_d(option = "magma", begin = 0.3, end = 0.9, direction = 1) +
labs(
title = "Normalized View of Stock Price Movements Over 7-Day Segments",
x = "Day Index (0-6)",
y = "Stock Price",
color = "Segment Index"
) +
theme_minimal()
ggplot() +
geom_line(data = aapl_df, aes(x = Date, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction)) +
# scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL Closing Prices with Predictive Points and Segments",
x = "Date", y = "Closing Price") +
theme_minimal()
selected_segments <- selected_segments %>%
mutate(
Relative_Days = map2(StartDate, EndDate, ~seq.Date(.x, .y, by = "day") - .x)
) %>%
unnest(cols = c(Relative_Days)) %>%
group_by(WindowIndex) %>%
mutate(
Day_Index = row_number() - 1  # Day 0 to Day 6
) %>%
ungroup()
plotting_data <- selected_segments %>%
select(WindowIndex, Day_Index, Start_Y, End_Y) %>%
arrange(WindowIndex, Day_Index)
# Calculate the Y values for each Day_Index based on the slope and intercept
plotting_data <- plotting_data %>%
group_by(WindowIndex) %>%
mutate(
Y_Value = Start_Y + (End_Y - Start_Y) * (Day_Index / max(Day_Index))
) %>%
ungroup()
ggplot(plotting_data, aes(x = Day_Index, y = Y_Value, group = WindowIndex, color = as.factor(WindowIndex))) +
geom_line(alpha = 0.75) +
scale_color_viridis_d(option = "magma", begin = 0.3, end = 0.9, direction = 1) +
labs(
title = "Normalized View of Stock Price Movements Over 7-Day Segments",
x = "Day Index (0-6)",
y = "Stock Price",
color = "Segment Index"
) +
theme_minimal()
plotting_data
p_seg_2 <- ggplot(plotting_data, aes(x = Day_Index, y = Y_Value, group = WindowIndex, color = as.factor(WindowIndex))) +
geom_line(alpha = 0.75) +
scale_color_viridis_d(option = "magma", begin = 0.3, end = 0.9, direction = 1) +
labs(
title = "Normalized View of Stock Price Movements Over 7-Day Segments",
x = "Day Index (0-6)",
y = "Stock Price",
color = "Segment Index"
) +
theme_minimal()
p_seg_1 <- ggplot() +
geom_line(data = aapl_df, aes(x = Date, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction)) +
# scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL Closing Prices with Predictive Points and Segments",
x = "Date", y = "Closing Price") +
theme_minimal()
p_seg_1
p_seg_2 <- ggplot(plotting_data, aes(x = Day_Index, y = Y_Value, group = WindowIndex, color = as.factor(WindowIndex))) +
geom_line(alpha = 0.75) +
scale_color_viridis_d(option = "magma", begin = 0.3, end = 0.9, direction = 1) +
labs(
title = "Normalized View of Stock Price Movements Over 7-Day Segments",
x = "Day Index (0-6)",
y = "Stock Price",
color = "Segment Index"
) +
theme_minimal()
p_seg_2
p_seg_1 / p_seg_2
p_seg_1 | p_seg_2
p_seg_comb <- p_seg_1 | p_seg_2
p_seg_2 <- ggplot(plotting_data, aes(x = Day_Index, y = Y_Value, group = WindowIndex, color = as.factor(WindowIndex))) +
geom_line(alpha = 0.75) +
scale_color_viridis_d(option = "magma", begin = 0.3, end = 0.9, direction = 1) +
labs(
title = "Normalized View of Stock Price\nMovements Over 7-Day Segments",
x = "Day Index (0-6)",
y = "Stock Price",
color = "Segment Index"
) +
theme_minimal()
p_seg_2
p_seg_comb <- p_seg_1 | p_seg_2
p_seg_1 <- ggplot() +
geom_line(data = aapl_df, aes(x = Date, y = AAPL.Close), color = "grey") +
geom_segment(data = merged_data, aes(x = StartDate, xend = EndDate, y = Start_Y, yend = End_Y, color = as.factor(WindowIndex)), alpha = 0.5) +
geom_point(data = merged_data, aes(x = Point_Date, y = Point_Close, color = Point_Prediction)) +
# scale_color_manual(values = c("red" = "red", "blue" = "blue", "1" = "yellow", "2" = "green", "3" = "purple")) +
labs(title = "AAPL closing prices with predictive points and segments",
x = "Date", y = "Closing Price") +
theme_minimal()
p_seg_1
selected_segments <- selected_segments %>%
mutate(
Relative_Days = map2(StartDate, EndDate, ~seq.Date(.x, .y, by = "day") - .x)
) %>%
unnest(cols = c(Relative_Days)) %>%
group_by(WindowIndex) %>%
mutate(
Day_Index = row_number() - 1  # Day 0 to Day 6
) %>%
ungroup()
p_seg_comb <- p_seg_1 | p_seg_2
p_seg_comb
p_seg_comb
ggsave("../output/plot_quantmod_p_seg_comb.pdf", p_seg_comb, width = 8, height = 6)
ggsave("../output/plot_quantmod_p_seg_comb.png", p_seg_comb, width = 8, height = 6)
ggsave("../output/plot_quantmod_p_seg_comb.pdf", p_seg_comb, width = 12, height = 6)
ggsave("../output/plot_quantmod_p_seg_comb.pdf", p_seg_comb, width = 12, height = 6)
